{
  "hash": "9509034fa538b37cd16ea623f38baa99",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`data.table` vs `dplyr`: A Side-by-Side Comparison\"\nauthor: \"Albert Rapp\"\ndate: \"2025-07-06\"\ncategories: [guest post, tutorials]\nimage: \"image.png\"\n---\n\n\n\n\n\\[Note: This blog post originally appeared on [albert-rapp.de](https://albert-rapp.de/posts/34_datatable_vs_dplyr/34_datatable_vs_dplyr) and has been shared here to serve both the `{data.table}` and `{dplyr}` communities.\\]\n\nIn today's blogpost I show you how to do common data cleaning operations via both `{data.table}` and `{dplyr}`. These are two fantastic frameworks inside the R ecosystem. As always, there's also a video version available:\n\n\n\n\n{{< video https://youtu.be/6EWZK2kMano >}}\n\n\n\n\n\n\n## Get data\n\nFirst, let us take a look at our data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(data.table)\names <- modeldata::ames |>\n  janitor::clean_names() |> \n  as_tibble() # this is already the case but for comparability done here again\names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,930 × 74\n   ms_sub_class           ms_zoning lot_frontage lot_area street alley lot_shape\n   <fct>                  <fct>            <dbl>    <int> <fct>  <fct> <fct>    \n 1 One_Story_1946_and_Ne… Resident…          141    31770 Pave   No_A… Slightly…\n 2 One_Story_1946_and_Ne… Resident…           80    11622 Pave   No_A… Regular  \n 3 One_Story_1946_and_Ne… Resident…           81    14267 Pave   No_A… Slightly…\n 4 One_Story_1946_and_Ne… Resident…           93    11160 Pave   No_A… Regular  \n 5 Two_Story_1946_and_Ne… Resident…           74    13830 Pave   No_A… Slightly…\n 6 Two_Story_1946_and_Ne… Resident…           78     9978 Pave   No_A… Slightly…\n 7 One_Story_PUD_1946_an… Resident…           41     4920 Pave   No_A… Regular  \n 8 One_Story_PUD_1946_an… Resident…           43     5005 Pave   No_A… Slightly…\n 9 One_Story_PUD_1946_an… Resident…           39     5389 Pave   No_A… Slightly…\n10 Two_Story_1946_and_Ne… Resident…           60     7500 Pave   No_A… Regular  \n# ℹ 2,920 more rows\n# ℹ 67 more variables: land_contour <fct>, utilities <fct>, lot_config <fct>,\n#   land_slope <fct>, neighborhood <fct>, condition_1 <fct>, condition_2 <fct>,\n#   bldg_type <fct>, house_style <fct>, overall_cond <fct>, year_built <int>,\n#   year_remod_add <int>, roof_style <fct>, roof_matl <fct>,\n#   exterior_1st <fct>, exterior_2nd <fct>, mas_vnr_type <fct>,\n#   mas_vnr_area <dbl>, exter_cond <fct>, foundation <fct>, bsmt_cond <fct>, …\n```\n\n\n:::\n:::\n\n\n\n\nWe will need to convert it to a `data.table`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames <- as.data.table(ames)\ndf_ames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                             ms_sub_class                ms_zoning lot_frontage\n                                   <fctr>                   <fctr>        <num>\n   1: One_Story_1946_and_Newer_All_Styles  Residential_Low_Density          141\n   2: One_Story_1946_and_Newer_All_Styles Residential_High_Density           80\n   3: One_Story_1946_and_Newer_All_Styles  Residential_Low_Density           81\n   4: One_Story_1946_and_Newer_All_Styles  Residential_Low_Density           93\n   5:            Two_Story_1946_and_Newer  Residential_Low_Density           74\n  ---                                                                          \n2926:                 Split_or_Multilevel  Residential_Low_Density           37\n2927: One_Story_1946_and_Newer_All_Styles  Residential_Low_Density            0\n2928:                         Split_Foyer  Residential_Low_Density           62\n2929: One_Story_1946_and_Newer_All_Styles  Residential_Low_Density           77\n2930:            Two_Story_1946_and_Newer  Residential_Low_Density           74\n      lot_area street           alley          lot_shape land_contour utilities\n         <int> <fctr>          <fctr>             <fctr>       <fctr>    <fctr>\n   1:    31770   Pave No_Alley_Access Slightly_Irregular          Lvl    AllPub\n   2:    11622   Pave No_Alley_Access            Regular          Lvl    AllPub\n   3:    14267   Pave No_Alley_Access Slightly_Irregular          Lvl    AllPub\n   4:    11160   Pave No_Alley_Access            Regular          Lvl    AllPub\n   5:    13830   Pave No_Alley_Access Slightly_Irregular          Lvl    AllPub\n  ---                                                                          \n2926:     7937   Pave No_Alley_Access Slightly_Irregular          Lvl    AllPub\n2927:     8885   Pave No_Alley_Access Slightly_Irregular          Low    AllPub\n2928:    10441   Pave No_Alley_Access            Regular          Lvl    AllPub\n2929:    10010   Pave No_Alley_Access            Regular          Lvl    AllPub\n2930:     9627   Pave No_Alley_Access            Regular          Lvl    AllPub\n      lot_config land_slope neighborhood condition_1 condition_2 bldg_type\n          <fctr>     <fctr>       <fctr>      <fctr>      <fctr>    <fctr>\n   1:     Corner        Gtl   North_Ames        Norm        Norm    OneFam\n   2:     Inside        Gtl   North_Ames       Feedr        Norm    OneFam\n   3:     Corner        Gtl   North_Ames        Norm        Norm    OneFam\n   4:     Corner        Gtl   North_Ames        Norm        Norm    OneFam\n   5:     Inside        Gtl      Gilbert        Norm        Norm    OneFam\n  ---                                                                     \n2926:    CulDSac        Gtl     Mitchell        Norm        Norm    OneFam\n2927:     Inside        Mod     Mitchell        Norm        Norm    OneFam\n2928:     Inside        Gtl     Mitchell        Norm        Norm    OneFam\n2929:     Inside        Mod     Mitchell        Norm        Norm    OneFam\n2930:     Inside        Mod     Mitchell        Norm        Norm    OneFam\n      house_style  overall_cond year_built year_remod_add roof_style roof_matl\n           <fctr>        <fctr>      <int>          <int>     <fctr>    <fctr>\n   1:   One_Story       Average       1960           1960        Hip   CompShg\n   2:   One_Story Above_Average       1961           1961      Gable   CompShg\n   3:   One_Story Above_Average       1958           1958        Hip   CompShg\n   4:   One_Story       Average       1968           1968        Hip   CompShg\n   5:   Two_Story       Average       1997           1998      Gable   CompShg\n  ---                                                                         \n2926:        SLvl Above_Average       1984           1984      Gable   CompShg\n2927:   One_Story       Average       1983           1983      Gable   CompShg\n2928:      SFoyer       Average       1992           1992      Gable   CompShg\n2929:   One_Story       Average       1974           1975      Gable   CompShg\n2930:   Two_Story       Average       1993           1994      Gable   CompShg\n      exterior_1st exterior_2nd mas_vnr_type mas_vnr_area exter_cond foundation\n            <fctr>       <fctr>       <fctr>        <num>     <fctr>     <fctr>\n   1:      BrkFace      Plywood        Stone          112    Typical     CBlock\n   2:      VinylSd      VinylSd         None            0    Typical     CBlock\n   3:      Wd Sdng      Wd Sdng      BrkFace          108    Typical     CBlock\n   4:      BrkFace      BrkFace         None            0    Typical     CBlock\n   5:      VinylSd      VinylSd         None            0    Typical      PConc\n  ---                                                                          \n2926:      HdBoard      HdBoard         None            0    Typical     CBlock\n2927:      HdBoard      HdBoard         None            0    Typical     CBlock\n2928:      HdBoard      Wd Shng         None            0    Typical      PConc\n2929:      HdBoard      HdBoard         None            0    Typical     CBlock\n2930:      HdBoard      HdBoard      BrkFace           94    Typical      PConc\n      bsmt_cond bsmt_exposure bsmt_fin_type_1 bsmt_fin_sf_1 bsmt_fin_type_2\n         <fctr>        <fctr>          <fctr>         <num>          <fctr>\n   1:      Good            Gd             BLQ             2             Unf\n   2:   Typical            No             Rec             6             LwQ\n   3:   Typical            No             ALQ             1             Unf\n   4:   Typical            No             ALQ             1             Unf\n   5:   Typical            No             GLQ             3             Unf\n  ---                                                                      \n2926:   Typical            Av             GLQ             3             Unf\n2927:   Typical            Av             BLQ             2             ALQ\n2928:   Typical            Av             GLQ             3             Unf\n2929:   Typical            Av             ALQ             1             LwQ\n2930:   Typical            Av             LwQ             4             Unf\n      bsmt_fin_sf_2 bsmt_unf_sf total_bsmt_sf heating heating_qc central_air\n              <num>       <num>         <num>  <fctr>     <fctr>      <fctr>\n   1:             0         441          1080    GasA       Fair           Y\n   2:           144         270           882    GasA    Typical           Y\n   3:             0         406          1329    GasA    Typical           Y\n   4:             0        1045          2110    GasA  Excellent           Y\n   5:             0         137           928    GasA       Good           Y\n  ---                                                                       \n2926:             0         184          1003    GasA    Typical           Y\n2927:           324         239           864    GasA    Typical           Y\n2928:             0         575           912    GasA    Typical           Y\n2929:           123         195          1389    GasA       Good           Y\n2930:             0         238           996    GasA  Excellent           Y\n      electrical first_flr_sf second_flr_sf gr_liv_area bsmt_full_bath\n          <fctr>        <int>         <int>       <int>          <num>\n   1:      SBrkr         1656             0        1656              1\n   2:      SBrkr          896             0         896              0\n   3:      SBrkr         1329             0        1329              0\n   4:      SBrkr         2110             0        2110              1\n   5:      SBrkr          928           701        1629              0\n  ---                                                                 \n2926:      SBrkr         1003             0        1003              1\n2927:      SBrkr          902             0         902              1\n2928:      SBrkr          970             0         970              0\n2929:      SBrkr         1389             0        1389              1\n2930:      SBrkr          996          1004        2000              0\n      bsmt_half_bath full_bath half_bath bedroom_abv_gr kitchen_abv_gr\n               <num>     <int>     <int>          <int>          <int>\n   1:              0         1         0              3              1\n   2:              0         1         0              2              1\n   3:              0         1         1              3              1\n   4:              0         2         1              3              1\n   5:              0         2         1              3              1\n  ---                                                                 \n2926:              0         1         0              3              1\n2927:              0         1         0              2              1\n2928:              1         1         0              3              1\n2929:              0         1         0              2              1\n2930:              0         2         1              3              1\n      tot_rms_abv_grd functional fireplaces garage_type garage_finish\n                <int>     <fctr>      <int>      <fctr>        <fctr>\n   1:               7        Typ          2      Attchd           Fin\n   2:               5        Typ          0      Attchd           Unf\n   3:               6        Typ          0      Attchd           Unf\n   4:               8        Typ          2      Attchd           Fin\n   5:               6        Typ          1      Attchd           Fin\n  ---                                                                \n2926:               6        Typ          0      Detchd           Unf\n2927:               5        Typ          0      Attchd           Unf\n2928:               6        Typ          0   No_Garage     No_Garage\n2929:               6        Typ          1      Attchd           RFn\n2930:               9        Typ          1      Attchd           Fin\n      garage_cars garage_area garage_cond      paved_drive wood_deck_sf\n            <num>       <num>      <fctr>           <fctr>        <int>\n   1:           2         528     Typical Partial_Pavement          210\n   2:           1         730     Typical            Paved          140\n   3:           1         312     Typical            Paved          393\n   4:           2         522     Typical            Paved            0\n   5:           2         482     Typical            Paved          212\n  ---                                                                  \n2926:           2         588     Typical            Paved          120\n2927:           2         484     Typical            Paved          164\n2928:           0           0   No_Garage            Paved           80\n2929:           2         418     Typical            Paved          240\n2930:           3         650     Typical            Paved          190\n      open_porch_sf enclosed_porch three_season_porch screen_porch pool_area\n              <int>          <int>              <int>        <int>     <int>\n   1:            62              0                  0            0         0\n   2:             0              0                  0          120         0\n   3:            36              0                  0            0         0\n   4:             0              0                  0            0         0\n   5:            34              0                  0            0         0\n  ---                                                                       \n2926:             0              0                  0            0         0\n2927:             0              0                  0            0         0\n2928:            32              0                  0            0         0\n2929:            38              0                  0            0         0\n2930:            48              0                  0            0         0\n      pool_qc           fence misc_feature misc_val mo_sold year_sold sale_type\n       <fctr>          <fctr>       <fctr>    <int>   <int>     <int>    <fctr>\n   1: No_Pool        No_Fence         None        0       5      2010       WD \n   2: No_Pool Minimum_Privacy         None        0       6      2010       WD \n   3: No_Pool        No_Fence         Gar2    12500       6      2010       WD \n   4: No_Pool        No_Fence         None        0       4      2010       WD \n   5: No_Pool Minimum_Privacy         None        0       3      2010       WD \n  ---                                                                          \n2926: No_Pool    Good_Privacy         None        0       3      2006       WD \n2927: No_Pool Minimum_Privacy         None        0       6      2006       WD \n2928: No_Pool Minimum_Privacy         Shed      700       7      2006       WD \n2929: No_Pool        No_Fence         None        0       4      2006       WD \n2930: No_Pool        No_Fence         None        0      11      2006       WD \n      sale_condition sale_price longitude latitude\n              <fctr>      <int>     <num>    <num>\n   1:         Normal     215000 -93.61975 42.05403\n   2:         Normal     105000 -93.61976 42.05301\n   3:         Normal     172000 -93.61939 42.05266\n   4:         Normal     244000 -93.61732 42.05125\n   5:         Normal     189900 -93.63893 42.06090\n  ---                                             \n2926:         Normal     142500 -93.60478 41.98896\n2927:         Normal     131000 -93.60268 41.98831\n2928:         Normal     132000 -93.60685 41.98651\n2929:         Normal     170000 -93.60019 41.99092\n2930:         Normal     188000 -93.60000 41.98927\n```\n\n\n:::\n:::\n\n\n\n\nAlso, let us set options for nicer `data.table` outputs. I don't want lot's of columns and rows to flood my console.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compact printing similar to tibble\noptions(\n    datatable.print.topn = 5,     # Show only top 10 rows\n    datatable.print.nrows = 10,   # Limit number of printed rows\n    datatable.print.class = TRUE, # Show column classes\n    datatable.print.trunc.cols = TRUE # Truncate wide columns\n)\n```\n:::\n\n\n\n\n## The general difference\n\n`{dplyr}` uses functions/verbs that are chained together. This has the advantage that it's easily readable to anybody because the function names are usually understandable even to non-programmers.\n\nOn the other hand `{data.table}` uses a super concise code style with lots of abbreviations. This has the advantage that the code is short but if you don't know the system then you might feel lost.\n\nSo let me explain the system behind `{data.table}`. The most basic thing to understand is that a data.table `df` can be modified via a bracket using up to three different components. This might look something like `df[i, j, by]`.\n\nThe first component `i` refers to rows that are \"modified\". The second component `j` refers to columns that might be `modified`. And the third component `by` refers to any grouping you might want to use.\n\nBut enough theory. Let's see this in action.\n\n## Sort specific columns\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> arrange(lot_frontage) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,930 × 74\n   ms_sub_class           ms_zoning lot_frontage lot_area street alley lot_shape\n   <fct>                  <fct>            <dbl>    <int> <fct>  <fct> <fct>    \n 1 One_Story_1946_and_Ne… Resident…            0     7980 Pave   No_A… Slightly…\n 2 One_Story_PUD_1946_an… Resident…            0     6820 Pave   No_A… Slightly…\n 3 Two_Story_1946_and_Ne… Floating…            0     7500 Pave   No_A… Regular  \n 4 One_Story_1946_and_Ne… Resident…            0    11241 Pave   No_A… Slightly…\n 5 One_Story_1946_and_Ne… Resident…            0    12537 Pave   No_A… Slightly…\n 6 Two_Story_1946_and_Ne… Resident…            0     7851 Pave   No_A… Regular  \n 7 Split_or_Multilevel    Resident…            0     7750 Pave   No_A… Slightly…\n 8 Two_Story_1946_and_Ne… Resident…            0     9505 Pave   No_A… Slightly…\n 9 Two_Story_1946_and_Ne… Resident…            0     8880 Pave   No_A… Slightly…\n10 Two_Story_1946_and_Ne… Resident…            0     9453 Pave   No_A… Slightly…\n# ℹ 2,920 more rows\n# ℹ 67 more variables: land_contour <fct>, utilities <fct>, lot_config <fct>,\n#   land_slope <fct>, neighborhood <fct>, condition_1 <fct>, condition_2 <fct>,\n#   bldg_type <fct>, house_style <fct>, overall_cond <fct>, year_built <int>,\n#   year_remod_add <int>, roof_style <fct>, roof_matl <fct>,\n#   exterior_1st <fct>, exterior_2nd <fct>, mas_vnr_type <fct>,\n#   mas_vnr_area <dbl>, exter_cond <fct>, foundation <fct>, bsmt_cond <fct>, …\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[order(lot_frontage)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                   ms_sub_class                    ms_zoning\n                                         <fctr>                       <fctr>\n   1:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n   2:              One_Story_PUD_1946_and_Newer      Residential_Low_Density\n   3:                  Two_Story_1946_and_Newer Floating_Village_Residential\n   4:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n   5:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n  ---                                                                       \n2926:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n2927: Two_Family_conversion_All_Styles_and_Ages      Residential_Low_Density\n2928:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n2929:       One_Story_1946_and_Newer_All_Styles      Residential_Low_Density\n2930:                  Two_Story_1946_and_Newer      Residential_Low_Density\n72 variables not shown: [lot_frontage <num>, lot_area <int>, street <fctr>, alley <fctr>, lot_shape <fctr>, land_contour <fctr>, utilities <fctr>, lot_config <fctr>, land_slope <fctr>, neighborhood <fctr>, ...]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Filter for specific rows\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> filter(sale_price > 300000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 230 × 74\n   ms_sub_class           ms_zoning lot_frontage lot_area street alley lot_shape\n   <fct>                  <fct>            <dbl>    <int> <fct>  <fct> <fct>    \n 1 Two_Story_1946_and_Ne… Resident…           47    53504 Pave   No_A… Moderate…\n 2 One_Story_1946_and_Ne… Resident…           88    11394 Pave   No_A… Regular  \n 3 Two_Story_1946_and_Ne… Resident…          102    12858 Pave   No_A… Slightly…\n 4 One_Story_1946_and_Ne… Resident…           98    11478 Pave   No_A… Regular  \n 5 One_Story_1946_and_Ne… Resident…           83    10159 Pave   No_A… Slightly…\n 6 One_Story_1946_and_Ne… Resident…          100    12919 Pave   No_A… Slightly…\n 7 One_Story_1946_and_Ne… Resident…          110    14300 Pave   No_A… Regular  \n 8 Two_Story_1946_and_Ne… Resident…          105    13650 Pave   No_A… Regular  \n 9 One_Story_PUD_1946_an… Resident…           61     7658 Pave   No_A… Regular  \n10 Two_Story_1946_and_Ne… Resident…          108    14774 Pave   No_A… Slightly…\n# ℹ 220 more rows\n# ℹ 67 more variables: land_contour <fct>, utilities <fct>, lot_config <fct>,\n#   land_slope <fct>, neighborhood <fct>, condition_1 <fct>, condition_2 <fct>,\n#   bldg_type <fct>, house_style <fct>, overall_cond <fct>, year_built <int>,\n#   year_remod_add <int>, roof_style <fct>, roof_matl <fct>,\n#   exterior_1st <fct>, exterior_2nd <fct>, mas_vnr_type <fct>,\n#   mas_vnr_area <dbl>, exter_cond <fct>, foundation <fct>, bsmt_cond <fct>, …\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[sale_price > 300000]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                            ms_sub_class               ms_zoning lot_frontage\n                                  <fctr>                  <fctr>        <num>\n  1:            Two_Story_1946_and_Newer Residential_Low_Density           47\n  2: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           88\n  3:            Two_Story_1946_and_Newer Residential_Low_Density          102\n  4: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           98\n  5: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           83\n ---                                                                         \n226:            Two_Story_1946_and_Newer Residential_Low_Density           42\n227: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           85\n228: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           95\n229: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           88\n230: One_Story_1946_and_Newer_All_Styles Residential_Low_Density           88\n71 variables not shown: [lot_area <int>, street <fctr>, alley <fctr>, lot_shape <fctr>, land_contour <fctr>, utilities <fctr>, lot_config <fctr>, land_slope <fctr>, neighborhood <fctr>, condition_1 <fctr>, ...]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Select specific columns\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  filter(sale_price > 300000) |> \n  select(neighborhood, sale_price, lot_area)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 230 × 3\n   neighborhood       sale_price lot_area\n   <fct>                   <int>    <int>\n 1 Stone_Brook            538000    53504\n 2 Stone_Brook            394432    11394\n 3 Northridge_Heights     376162    12858\n 4 Northridge_Heights     306000    11478\n 5 Northridge_Heights     395192    10159\n 6 Northridge_Heights     611657    12919\n 7 Northridge_Heights     500000    14300\n 8 Northridge_Heights     320000    13650\n 9 Northridge_Heights     319900     7658\n10 Northridge             333168    14774\n# ℹ 220 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(neighborhood, sale_price, lot_area)\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           neighborhood sale_price lot_area\n                 <fctr>      <int>    <int>\n  1:        Stone_Brook     538000    53504\n  2:        Stone_Brook     394432    11394\n  3: Northridge_Heights     376162    12858\n  4: Northridge_Heights     306000    11478\n  5: Northridge_Heights     395192    10159\n ---                                       \n226:         Timberland     335000    26178\n227:         Timberland     312500    14331\n228:         Timberland     320000    13618\n229:         Timberland     369900    11443\n230:         Timberland     359900    11577\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table` (`.()` shorthand)\n\nIf you don't want to type out the `list()` command, you can also use `data.table`'s shorthand notation `.()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  .(neighborhood, sale_price, lot_area)\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           neighborhood sale_price lot_area\n                 <fctr>      <int>    <int>\n  1:        Stone_Brook     538000    53504\n  2:        Stone_Brook     394432    11394\n  3: Northridge_Heights     376162    12858\n  4: Northridge_Heights     306000    11478\n  5: Northridge_Heights     395192    10159\n ---                                       \n226:         Timberland     335000    26178\n227:         Timberland     312500    14331\n228:         Timberland     320000    13618\n229:         Timberland     369900    11443\n230:         Timberland     359900    11577\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Select many columns by name\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> select(contains('area'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,930 × 5\n   lot_area mas_vnr_area gr_liv_area garage_area pool_area\n      <int>        <dbl>       <int>       <dbl>     <int>\n 1    31770          112        1656         528         0\n 2    11622            0         896         730         0\n 3    14267          108        1329         312         0\n 4    11160            0        2110         522         0\n 5    13830            0        1629         482         0\n 6     9978           20        1604         470         0\n 7     4920            0        1338         582         0\n 8     5005            0        1280         506         0\n 9     5389            0        1616         608         0\n10     7500            0        1804         442         0\n# ℹ 2,920 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, .SD, .SDcols = patterns('area')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      lot_area mas_vnr_area gr_liv_area garage_area pool_area\n         <int>        <num>       <int>       <num>     <int>\n   1:    31770          112        1656         528         0\n   2:    11622            0         896         730         0\n   3:    14267          108        1329         312         0\n   4:    11160            0        2110         522         0\n   5:    13830            0        1629         482         0\n  ---                                                        \n2926:     7937            0        1003         588         0\n2927:     8885            0         902         484         0\n2928:    10441            0         970           0         0\n2929:    10010            0        1389         418         0\n2930:     9627           94        2000         650         0\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Select many columns by type\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  select(where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,930 × 34\n   lot_frontage lot_area year_built year_remod_add mas_vnr_area bsmt_fin_sf_1\n          <dbl>    <int>      <int>          <int>        <dbl>         <dbl>\n 1          141    31770       1960           1960          112             2\n 2           80    11622       1961           1961            0             6\n 3           81    14267       1958           1958          108             1\n 4           93    11160       1968           1968            0             1\n 5           74    13830       1997           1998            0             3\n 6           78     9978       1998           1998           20             3\n 7           41     4920       2001           2001            0             3\n 8           43     5005       1992           1992            0             1\n 9           39     5389       1995           1996            0             3\n10           60     7500       1999           1999            0             7\n# ℹ 2,920 more rows\n# ℹ 28 more variables: bsmt_fin_sf_2 <dbl>, bsmt_unf_sf <dbl>,\n#   total_bsmt_sf <dbl>, first_flr_sf <int>, second_flr_sf <int>,\n#   gr_liv_area <int>, bsmt_full_bath <dbl>, bsmt_half_bath <dbl>,\n#   full_bath <int>, half_bath <int>, bedroom_abv_gr <int>,\n#   kitchen_abv_gr <int>, tot_rms_abv_grd <int>, fireplaces <int>,\n#   garage_cars <dbl>, garage_area <dbl>, wood_deck_sf <int>, …\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, .SD, .SDcols = is.numeric]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      lot_frontage lot_area year_built year_remod_add mas_vnr_area\n             <num>    <int>      <int>          <int>        <num>\n   1:          141    31770       1960           1960          112\n   2:           80    11622       1961           1961            0\n   3:           81    14267       1958           1958          108\n   4:           93    11160       1968           1968            0\n   5:           74    13830       1997           1998            0\n  ---                                                             \n2926:           37     7937       1984           1984            0\n2927:            0     8885       1983           1983            0\n2928:           62    10441       1992           1992            0\n2929:           77    10010       1974           1975            0\n2930:           74     9627       1993           1994           94\n29 variables not shown: [bsmt_fin_sf_1 <num>, bsmt_fin_sf_2 <num>, bsmt_unf_sf <num>, total_bsmt_sf <num>, first_flr_sf <int>, second_flr_sf <int>, gr_liv_area <int>, bsmt_full_bath <num>, bsmt_half_bath <num>, full_bath <int>, ...]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Compute a new column\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  filter(sale_price > 300000) |> \n  select(neighborhood, sale_price, lot_area) |> \n  mutate(\n    price_by_lot_area = sale_price / lot_area\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 230 × 4\n   neighborhood       sale_price lot_area price_by_lot_area\n   <fct>                   <int>    <int>             <dbl>\n 1 Stone_Brook            538000    53504              10.1\n 2 Stone_Brook            394432    11394              34.6\n 3 Northridge_Heights     376162    12858              29.3\n 4 Northridge_Heights     306000    11478              26.7\n 5 Northridge_Heights     395192    10159              38.9\n 6 Northridge_Heights     611657    12919              47.3\n 7 Northridge_Heights     500000    14300              35.0\n 8 Northridge_Heights     320000    13650              23.4\n 9 Northridge_Heights     319900     7658              41.8\n10 Northridge             333168    14774              22.6\n# ℹ 220 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table` (new data.table)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area\n  )\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           neighborhood sale_price lot_area price_by_lot_area\n                 <fctr>      <int>    <int>             <num>\n  1:        Stone_Brook     538000    53504          10.05532\n  2:        Stone_Brook     394432    11394          34.61752\n  3: Northridge_Heights     376162    12858          29.25509\n  4: Northridge_Heights     306000    11478          26.65970\n  5: Northridge_Heights     395192    10159          38.90068\n ---                                                         \n226:         Timberland     335000    26178          12.79701\n227:         Timberland     312500    14331          21.80588\n228:         Timberland     320000    13618          23.49831\n229:         Timberland     369900    11443          32.32544\n230:         Timberland     359900    11577          31.08750\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Specialty of `data.table`: modify in place\n\nIn the last step we have seen that `mutate()` and using a `list()` inside the `[]` of a `data.table` work almost similarly. But there's a specialty that you might want to keep in mind.\n\nYou see, in the previous example we created a new `data.table`. And that's why we have seen an output after `df_ames[...]`. But checkout what happens if I don't use `list()` and instead use the `:=` operator inside the brackets.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  price_by_lot_area := sale_price / lot_area\n]\n```\n:::\n\n\n\n\nSee? No output. But if we look at `df_ames`, we'll notice that the `price_by_lot_area` was actually created. And that happened even though we never overwrote `df_ames` like `df_ames <-`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Notice no filter on rows here as first argument was left blank.\ndf_ames[, price_by_lot_area] |> head(30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]       NA       NA       NA       NA       NA       NA       NA       NA\n [9]       NA       NA       NA       NA       NA       NA       NA 10.05532\n[17]       NA 34.61752       NA       NA       NA       NA       NA       NA\n[25]       NA       NA       NA       NA       NA       NA\n```\n\n\n:::\n:::\n\n\n\n\nNotice now that we have lots of `NA`s in that column now. This happens because we instructed R to only compute the `price_by_lot_area` column where `sale_price > 300000`. Interesting how that works, isn't it?\n\nIf you wanted to calculate all values, you could leave out the filtering condition.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, price_by_lot_area := sale_price / lot_area]\ndf_ames[, price_by_lot_area] |> head(30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  6.767391  9.034590 12.055793 21.863799 13.731020 19.593105 43.394309\n [8] 38.261738 43.885693 25.200000 17.590000 23.182957 21.471078 16.853381\n[15] 31.085044 10.055323 13.515741 34.617518  7.367541 15.939279 16.168837\n[22] 16.000000 28.800000 13.255048 11.956608 16.804734 15.000000 10.952381\n[29] 31.410038 57.142857\n```\n\n\n:::\n:::\n\n\n\n\n## Calculate multiple new columns\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  filter(sale_price > 300000) |> \n  select(neighborhood, sale_price, lot_area) |> \n  mutate(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log_sale_price / lot_area\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 230 × 6\n   neighborhood       sale_price lot_area price_by_lot_area log_sale_price\n   <fct>                   <int>    <int>             <dbl>          <dbl>\n 1 Stone_Brook            538000    53504              10.1           13.2\n 2 Stone_Brook            394432    11394              34.6           12.9\n 3 Northridge_Heights     376162    12858              29.3           12.8\n 4 Northridge_Heights     306000    11478              26.7           12.6\n 5 Northridge_Heights     395192    10159              38.9           12.9\n 6 Northridge_Heights     611657    12919              47.3           13.3\n 7 Northridge_Heights     500000    14300              35.0           13.1\n 8 Northridge_Heights     320000    13650              23.4           12.7\n 9 Northridge_Heights     319900     7658              41.8           12.7\n10 Northridge             333168    14774              22.6           12.7\n# ℹ 220 more rows\n# ℹ 1 more variable: log_price_by_lot_area <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table` (new)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log(sale_price) / lot_area\n  )\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           neighborhood sale_price lot_area price_by_lot_area log_sale_price\n                 <fctr>      <int>    <int>             <num>          <num>\n  1:        Stone_Brook     538000    53504          10.05532       13.19561\n  2:        Stone_Brook     394432    11394          34.61752       12.88520\n  3: Northridge_Heights     376162    12858          29.25509       12.83778\n  4: Northridge_Heights     306000    11478          26.65970       12.63134\n  5: Northridge_Heights     395192    10159          38.90068       12.88713\n ---                                                                        \n226:         Timberland     335000    26178          12.79701       12.72189\n227:         Timberland     312500    14331          21.80588       12.65236\n228:         Timberland     320000    13618          23.49831       12.67608\n229:         Timberland     369900    11443          32.32544       12.82099\n230:         Timberland     359900    11577          31.08750       12.79358\n1 variable not shown: [log_price_by_lot_area <num>]\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table` (in-place)\n\nTo create multiple columns in place, you can either use the `let()` command\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  let(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log(sale_price) / lot_area\n  )\n]\n```\n:::\n\n\n\n\nor the `:=` operator.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  `:=`(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log(sale_price) / lot_area\n  )\n]\n```\n:::\n\n\n\n:::\n\n## Specialty of `data.table`: chaining\n\nNotice that in both previous `data.table` examples we have used `log(sale_price)` twice. That means after calculating the `log_sale_price` column, we didn't actually use that column later on. The reason for this is that it simply doesn't work. You cannot calculate a new column and use it in the same step.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reset df_ames so that `log_sale_price` doesn't exist\n# due to previous calculations.\ndf_ames <- as.data.table(ames) \ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log_sale_price / lot_area # log_sale_price here\n  )\n]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(jsub, SDenv, parent.frame()): object 'log_sale_price' not found\n```\n\n\n:::\n:::\n\n\n\n\nOne way to fix that is to use chain operations. You can do so by using multiple brackets like `df_ames[...][...]`, you can chain multiple operations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n][, log_price_by_lot_area := log_sale_price / lot_area]\n```\n:::\n\n\n\n\nNotice that this technically worked and didn't throw an error, but you cannot find any of the new columns in `df_ames`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, list(neighborhood, log_price_by_lot_area)]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(jsub, SDenv, parent.frame()): object 'log_price_by_lot_area' not found\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_ames[, list(neighborhood, log_sale_price)]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(jsub, SDenv, parent.frame()): object 'log_sale_price' not found\n```\n\n\n:::\n:::\n\n\n\n\nHere's why that happened: First, we created **a new** data.table by not using the in-place version. Remember how the `list()` command creates a new `data.table`? That's why you get an output here:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           neighborhood sale_price lot_area price_by_lot_area log_sale_price\n                 <fctr>      <int>    <int>             <num>          <num>\n  1:        Stone_Brook     538000    53504          10.05532       13.19561\n  2:        Stone_Brook     394432    11394          34.61752       12.88520\n  3: Northridge_Heights     376162    12858          29.25509       12.83778\n  4: Northridge_Heights     306000    11478          26.65970       12.63134\n  5: Northridge_Heights     395192    10159          38.90068       12.88713\n ---                                                                        \n226:         Timberland     335000    26178          12.79701       12.72189\n227:         Timberland     312500    14331          21.80588       12.65236\n228:         Timberland     320000    13618          23.49831       12.67608\n229:         Timberland     369900    11443          32.32544       12.82099\n230:         Timberland     359900    11577          31.08750       12.79358\n```\n\n\n:::\n:::\n\n\n\n\nBut if you don't save this into a new variable, then this new data table isn't saved. Now, in the next step, we use the in-place mode of operations on the **new** data.table.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n][, log_price_by_lot_area := log_sale_price / lot_area]\n```\n:::\n\n\n\n\nThis technically works but in-place calculations don't return anything. They just modify the existing object. But the existing object is the **new** data.table that we still never saved anywhere. Hence, that calculation runs successfully but the results vanish the moment the calculation finishes.\n\nWhat's worse is that even if you try to save these results later, it's no use. See? No results here:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_test <- df_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n][, log_price_by_lot_area := log_sale_price / lot_area]\ndf_test\n```\n:::\n\n\n\n\nSo there are two ways you could fix this. Either chain your results without using the in-place calculations. This means either using `list()` or `.()` in later steps of the chain.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n][, .(log_price_by_lot_area = log_sale_price / lot_area)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     log_price_by_lot_area\n                     <num>\n  1:          0.0002466285\n  2:          0.0011308761\n  3:          0.0009984271\n  4:          0.0011004827\n  5:          0.0012685429\n ---                      \n226:          0.0004859762\n227:          0.0008828665\n228:          0.0009308324\n229:          0.0011204219\n230:          0.0011050861\n```\n\n\n:::\n:::\n\n\n\n\nAs we've seen before, this will then only return a `data.table` with the filtered rows. Or alternatively, you could use only in-place calculation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  let(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n][, log_price_by_lot_area := log_sale_price / lot_area]\n\ndf_ames[\n  # Set filter to see both NA and non-NA values\n  sale_price > 200000, \n  .(neighborhood, price_by_lot_area, log_sale_price, log_price_by_lot_area)\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     neighborhood price_by_lot_area log_sale_price log_price_by_lot_area\n           <fctr>             <num>          <num>                 <num>\n  1:   North_Ames                NA             NA                    NA\n  2:   North_Ames                NA             NA                    NA\n  3:  Stone_Brook                NA             NA                    NA\n  4:  Stone_Brook                NA             NA                    NA\n  5:  Stone_Brook                NA             NA                    NA\n ---                                                                    \n853:   Timberland          21.80588       12.65236          0.0008828665\n854:   Timberland          23.49831       12.67608          0.0009308324\n855:   Timberland          32.32544       12.82099          0.0011204219\n856:   Timberland          31.08750       12.79358          0.0011050861\n857:     Mitchell                NA             NA                    NA\n```\n\n\n:::\n:::\n\n\n\n\nBut personally I prefer to chain things with a pipe operator. With the R native pipe operator `|>` and its placeholder variable `_` this works pretty well.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    neighborhood, \n    sale_price, \n    lot_area,\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price)\n  )\n] |> \n  _[, .(log_price_by_lot_area = log_sale_price / lot_area)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     log_price_by_lot_area\n                     <num>\n  1:          0.0002466285\n  2:          0.0011308761\n  3:          0.0009984271\n  4:          0.0011004827\n  5:          0.0012685429\n ---                      \n226:          0.0004859762\n227:          0.0008828665\n228:          0.0009308324\n229:          0.0011204219\n230:          0.0011050861\n```\n\n\n:::\n:::\n\n\n\n\n## Calculate summary statistics (without grouping)\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  filter(sale_price > 300000) |> \n  select(neighborhood, sale_price, lot_area) |> \n  mutate(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log_sale_price / lot_area\n  ) |> \n  summarize(\n    mean_sale_price = mean(sale_price),\n    n_houses = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_sale_price n_houses\n            <dbl>    <int>\n1         378693.      230\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\nIn `data.tables` the special variable `.N` refers to the amount of rows. In this case `.N` refers to the amount of all rows. In a grouped setting, `.N` would refer to the group sizes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    mean_sale_price = mean(sale_price),\n    n_houses = .N\n  )\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   mean_sale_price n_houses\n             <num>    <int>\n1:        378693.4      230\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Calculate summary statistics (with grouping)\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  filter(sale_price > 300000) |> \n  select(neighborhood, sale_price, lot_area) |> \n  mutate(\n    price_by_lot_area = sale_price / lot_area,\n    log_sale_price = log(sale_price),\n    log_price_by_lot_area = log_sale_price / lot_area\n  ) |> \n  summarize(\n    mean_sale_price = mean(sale_price),\n    n_houses = n(),\n    .by = neighborhood # use grouping\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 3\n   neighborhood       mean_sale_price n_houses\n   <fct>                        <dbl>    <int>\n 1 Stone_Brook                417381.       27\n 2 Northridge_Heights         389422.       91\n 3 Northridge                 387282.       37\n 4 Clear_Creek                315000         2\n 5 Edwards                    347677.        3\n 6 Sawyer_West                312533.        3\n 7 College_Creek              363104.       10\n 8 Crawford                   347410        10\n 9 Timberland                 353320        15\n10 North_Ames                 323300         2\n11 Gilbert                    335500         3\n12 Somerset                   345156        19\n13 Veenker                    350188.        4\n14 Northwest_Ames             306000         1\n15 Old_Town                   400000         2\n16 Green_Hills                330000         1\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\nIn `data.tables` the special variable `.N` refers to the amount of rows. In this case `.N` refers to the amount of all rows. In a grouped setting, `.N` would refer to the group sizes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[\n  sale_price > 300000, \n  list(\n    mean_sale_price = mean(sale_price),\n    n_houses = .N\n  ),\n  by = neighborhood  # use grouping\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          neighborhood mean_sale_price n_houses\n                <fctr>           <num>    <int>\n 1:        Stone_Brook        417381.1       27\n 2: Northridge_Heights        389421.9       91\n 3:         Northridge        387281.6       37\n 4:        Clear_Creek        315000.0        2\n 5:            Edwards        347676.7        3\n---                                            \n12:           Somerset        345156.0       19\n13:            Veenker        350187.5        4\n14:     Northwest_Ames        306000.0        1\n15:           Old_Town        400000.0        2\n16:        Green_Hills        330000.0        1\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Iterate over multiple columns\n\nLet's combine our knowledge of selecting multiple columns to calculate summary stats for many columns.\n\n::: panel-tabset\n### `dplyr`\n\nIn `dplyr` this needs the `across()` function inside of `summarize()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  summarize(\n    across(\n      .cols = contains('area'),\n      .fns = mean\n    ),\n    .by = neighborhood\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 28 × 6\n   neighborhood        lot_area mas_vnr_area gr_liv_area garage_area pool_area\n   <fct>                  <dbl>        <dbl>       <dbl>       <dbl>     <dbl>\n 1 North_Ames            10040.         92.2       1292.        423.     1.99 \n 2 Gilbert               11342.         39.2       1621.        454.     0    \n 3 Stone_Brook           11383.        211.        1949.        626.     0    \n 4 Northwest_Ames        11662.        171.        1689.        535.     8.91 \n 5 Somerset               7611.        138.        1605.        620.     0    \n 6 Briardale              1841.        364.        1115.        292      0    \n 7 Northpark_Villa        2756.          0         1244.        421.     0    \n 8 Northridge_Heights    11217.        331.        1943.        748.     0.867\n 9 Bloomington_Heights    3399.         41.6       1405.        493.     0    \n10 Northridge            12976.        417.        2481.        721.     7.82 \n# ℹ 18 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\nIn `data.table`, you can just use the `.SD` variable again and combine that with `lapply()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, \n  c(\n    lapply(.SD, mean, na.rm = TRUE),\n    n_houses = .N\n  ),\n  by = neighborhood,\n  .SDcols = patterns('area')\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      neighborhood  lot_area mas_vnr_area gr_liv_area garage_area pool_area\n            <fctr>     <num>        <num>       <num>       <num>     <num>\n 1:     North_Ames 10039.702     92.24605    1292.054    423.2460  1.986456\n 2:        Gilbert 11342.370     39.17576    1620.897    453.8000  0.000000\n 3:    Stone_Brook 11383.392    211.15686    1949.216    625.7059  0.000000\n 4: Northwest_Ames 11661.695    170.78626    1688.771    534.9084  8.908397\n 5:       Somerset  7610.676    137.56044    1604.830    620.3407  0.000000\n---                                                                        \n24:     Timberland 18233.542    179.87500    1714.639    604.6667  0.000000\n25: Meadow_Village  2109.027      7.27027    1066.703    226.3784  0.000000\n26:        Veenker 15482.208    139.00000    1819.542    574.0833 33.333333\n27:    Green_Hills  9001.000    119.50000    1398.500    299.0000  0.000000\n28:       Landmark  3612.000      0.00000    1320.000    484.0000  0.000000\n3 variables not shown: [price_by_lot_area <num>, log_price_by_lot_area <num>, N <int>]\n```\n\n\n:::\n:::\n\n\n\n:::\n\nNotice that for `data.table` we had to use the `c()` function to comine results. Had we used a list via `.()`, then results wouldn't look quite the same.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, \n  .(\n    lapply(.SD, mean, na.rm = TRUE),\n    n_houses = .N\n  ),\n  by = neighborhood,\n  .SDcols = patterns('area')\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     neighborhood       V1 n_houses\n           <fctr>   <list>    <int>\n  1:   North_Ames  10039.7      443\n  2:   North_Ames 92.24605      443\n  3:   North_Ames 1292.054      443\n  4:   North_Ames  423.246      443\n  5:   North_Ames 1.986456      443\n ---                               \n192:     Landmark     1320        1\n193:     Landmark      484        1\n194:     Landmark        0        1\n195:     Landmark      NaN        1\n196:     Landmark      NaN        1\n```\n\n\n:::\n:::\n\n\n\n\nOr we could also cover, say, numeric columns. In that case we shouldn't use `.cols = contains()` and `.SDcols = patterns()`. Instead we'd use `.cols = where(is.numeric)` and `.SDcols = is.numeric`:\n\n::: panel-tabset\n### `dplyr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\names |> \n  summarize(\n    across(\n      .cols = where(is.numeric),\n      .fns = mean\n    ),\n    .by = neighborhood\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 28 × 35\n   neighborhood     lot_frontage lot_area year_built year_remod_add mas_vnr_area\n   <fct>                   <dbl>    <dbl>      <dbl>          <dbl>        <dbl>\n 1 North_Ames               63.7   10040.      1960.          1971.         92.2\n 2 Gilbert                  49.9   11342.      1998.          1999.         39.2\n 3 Stone_Brook              56.1   11383.      1999.          2000.        211. \n 4 Northwest_Ames           52.9   11662.      1976.          1980.        171. \n 5 Somerset                 57.5    7611.      2005.          2005.        138. \n 6 Briardale                21.5    1841.      1972.          1973         364. \n 7 Northpark_Villa          25.7    2756.      1976.          1976.          0  \n 8 Northridge_Heig…         82.7   11217.      2006.          2006.        331. \n 9 Bloomington_Hei…         33.5    3399.      2005.          2005.         41.6\n10 Northridge               69.7   12976.      1995.          1997.        417. \n# ℹ 18 more rows\n# ℹ 29 more variables: bsmt_fin_sf_1 <dbl>, bsmt_fin_sf_2 <dbl>,\n#   bsmt_unf_sf <dbl>, total_bsmt_sf <dbl>, first_flr_sf <dbl>,\n#   second_flr_sf <dbl>, gr_liv_area <dbl>, bsmt_full_bath <dbl>,\n#   bsmt_half_bath <dbl>, full_bath <dbl>, half_bath <dbl>,\n#   bedroom_abv_gr <dbl>, kitchen_abv_gr <dbl>, tot_rms_abv_grd <dbl>,\n#   fireplaces <dbl>, garage_cars <dbl>, garage_area <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n### `data.table`\n\nIn `data.tables` the special variable `.N` refers to the amount of rows. In this case `.N` refers to the amount of all rows. In a grouped setting, `.N` would refer to the group sizes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ames[, \n  c(\n    lapply(.SD, mean, na.rm = TRUE),\n    n_houses = .N\n  ),\n  by = neighborhood,\n  .SDcols = is.numeric\n]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      neighborhood lot_frontage  lot_area year_built year_remod_add\n            <fctr>        <num>     <num>      <num>          <num>\n 1:     North_Ames     63.66591 10039.702   1959.876       1970.652\n 2:        Gilbert     49.92121 11342.370   1998.303       1998.994\n 3:    Stone_Brook     56.07843 11383.392   1999.431       1999.725\n 4: Northwest_Ames     52.89313 11661.695   1975.588       1980.252\n 5:       Somerset     57.45604  7610.676   2004.621       2004.956\n---                                                                \n24:     Timberland     64.25000 18233.542   1995.333       1996.667\n25: Meadow_Village     22.83784  2109.027   1972.243       1976.027\n26:        Veenker     48.00000 15482.208   1981.708       1987.750\n27:    Green_Hills      0.00000  9001.000   1992.000       1992.000\n28:       Landmark      0.00000  3612.000   1993.000       1994.000\n34 variables not shown: [mas_vnr_area <num>, bsmt_fin_sf_1 <num>, bsmt_fin_sf_2 <num>, bsmt_unf_sf <num>, total_bsmt_sf <num>, first_flr_sf <num>, second_flr_sf <num>, gr_liv_area <num>, bsmt_full_bath <num>, bsmt_half_bath <num>, ...]\n```\n\n\n:::\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}