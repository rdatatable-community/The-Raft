---
title: "`data.table.threads` - find the best thread count!"
author: "Anirban Chetia"
date: "2024-10-21"
categories: [developer, benchmarks, speedup, parallelization]
image: ""
draft: false
---

## [`data.table.threads`](https://github.com/Anirban166/data.table.threads)

When working with large datasets, leveraging system resources like multiple CPU threads for shared-memory parallelization can significantly reduce computation time. However, it isnâ€™t straightforward to determine the optimal thread count to obtain the lowest runtime for an operation, or on the other hand, the number of threads required for efficient speedup scaling.

In an R package like `data.table` where parallelization is extensively utilized (or by most operations), it can be convenient to automatically figure out the number of threads to use for achieving the fastest execution time in the case of a particular routine, without the user needing to rely on ad-hoc experiments. Likewise, it would be handy if the user could set the thread count keeping in mind maximum (or a user-defined ratio) scalability in terms of the speedup obtained, which otherwise can be tricky or time-consuming to figure out manually.

This is where `data.table.threads` comes in - A package designed to assist in finding the most suitable thread count for the various parallelized operations within `data.table`.

## Key features

`findOptimalThreadCount(rowCount, columnCount, ...)`, the main user-facing function, runs a set of predefined benchmarks for each applicable function across varying thread counts (iteratively from one to the highest number available as per the user's system) and involves computation to find the optimal/ideal speedup and thread count for each function. It returns a `data.table` object of a custom class (`print` and `plot` methods have been provided), which contains the optimal thread count for each function. It also provides plot data (consisting of speedup trends and key points) as attributes.

Printing this object would enlist the fastest median runtime (in milliseconds) along with the thread count that achieved it for each function.

Plotting the object would generate a plot that shows the ideal, recommended, and measured speedup trends for each benchmarked `data.table` function.

If the user wants to factor in a specified speedup efficiency, they can use the function `addRecommendedEfficiency` to add a speedup line with a slope configured by input argument `efficiencyFactor` (default value is 0.5, or 50% efficiency), along with a point representing the recommended thread count which stems from the highest intersection between this line (of specified thread-use efficiency) and measured speedup data for each function.

Here is an example:
```{r}
library(data.table.threads)

(benchmarkData <- data.table.threads::findOptimalThreadCount(1e7, 10, verbose = FALSE))
plot(benchmarkData)
benchmarkData_r <- addRecommendedEfficiency(benchmarkData, recommendedEfficiency = 0.6)
plot(benchmarkData_r)
```

In order to set the thread count based on observed results for a user-specified function and speedup efficiency value, the `setThreadCount(benchmarkData, functionName, efficiencyFactor)` function can then be used:
```{r}
setOptimalThreadCount(benchmarks, functionName = "forder")
```